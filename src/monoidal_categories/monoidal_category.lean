-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison
import .tensor_product

open categories
open categories.functor
open categories.products
open categories.natural_transformation

namespace categories.monoidal_category

universe u

class MonoidalStructure (C : Type (u+1)) [category C] :=
  (tensor                      : TensorProduct C)
  (tensor_unit                 : C)
  (associator_transformation   : Associator tensor)
  (left_unitor_transformation  : LeftUnitor tensor_unit tensor)
  (right_unitor_transformation : RightUnitor tensor_unit tensor)

  (pentagon                  : Pentagon associator_transformation . obviously)
  (triangle                  : Triangle tensor_unit left_unitor_transformation right_unitor_transformation associator_transformation . obviously)

variables {C : Type (u+1)} [category C]

make_lemma MonoidalStructure.pentagon
make_lemma MonoidalStructure.triangle
attribute [ematch] MonoidalStructure.pentagon_lemma
attribute [simp,ematch] MonoidalStructure.triangle_lemma

namespace MonoidalStructure

-- Convenience methods which take two arguments, rather than a pair. (This seems to often help the elaborator avoid getting stuck on `prod.mk`.)
@[reducible] definition tensorObjects [ m : MonoidalStructure C ] ( X Y : C ) : C := tensor C ‚ü®X, Y‚ü©
@[reducible] definition tensorMorphisms [ m : MonoidalStructure C ] { W X Y Z : C } ( f : W ‚ü∂ X ) ( g : Y ‚ü∂ Z ) : (tensor C ‚ü®W, Y‚ü©) ‚ü∂ (tensor C ‚ü®X, Z‚ü©) := m.tensor.onMorphisms ‚ü®f, g‚ü©

infixr ` ‚äó `:80 := tensorObjects -- type as \gg
infixr ` ‚äó `:80 := tensorMorphisms -- type as \gg

@[reducible] definition left_unitor
  [ m : MonoidalStructure C ]
  ( X : C ) : (m.tensor_unit ‚äó X) ‚ü∂ X := ((left_unitor_transformation C).components X).morphism
  
@[reducible] definition right_unitor
  [ m : MonoidalStructure C ]
  ( X : C ) : (X ‚äó m.tensor_unit) ‚ü∂ X := ((right_unitor_transformation C).components X).morphism

@[reducible] definition MonoidalStructure.inverse_left_unitor
  [ m : MonoidalStructure C ]
  ( X : C ) : X ‚ü∂ (m.tensor_unit ‚äó X) := m.left_unitor_transformation.inverse.components X
  
@[reducible] definition MonoidalStructure.inverse_right_unitor
  [ m : MonoidalStructure C ]
  ( X : C) : X ‚ü∂ (X ‚äó m.tensor_unit) := m.right_unitor_transformation.inverse.components X

@[reducible] definition MonoidalStructure.associator
  [ m : MonoidalStructure C ]
  ( X Y Z : C ) : ((X ‚äó Y) ‚äó Z) ‚ü∂ (X ‚äó (Y ‚äó Z)) :=
  ((associator_transformation C).components ‚ü®‚ü®X, Y‚ü©, Z‚ü©).morphism

@[reducible] definition MonoidalStructure.inverse_associator
  [ m : MonoidalStructure C ]
  ( X Y Z : C ) : (X ‚äó (Y ‚äó Z)) ‚ü∂ ((X ‚äó Y) ‚äó Z) :=
  m.associator_transformation.inverse.components ‚ü®‚ü®X, Y‚ü©, Z‚ü©

@[ematch] definition MonoidalStructure.interchange
  [ m : MonoidalStructure C ]
  { U V W X Y Z: C }
  ( f : U ‚ü∂ V )( g : V ‚ü∂ W )( h : X ‚ü∂ Y )( k : Y ‚ü∂ Z ) :
  @Functor.onMorphisms _ _ _ _ m.tensor ‚ü®U, X‚ü© ‚ü®W, Z‚ü© ‚ü®(f ‚â´ g), (h ‚â´ k)‚ü©
  = (@Functor.onMorphisms _ _ _ _ m.tensor ‚ü®U, X‚ü© ‚ü®V, Y‚ü© ‚ü®f, h‚ü©) ‚â´ 
    (@Functor.onMorphisms _ _ _ _ m.tensor ‚ü®V, Y‚ü© ‚ü®W, Z‚ü© ‚ü®g, k‚ü©) :=
  @Functor.functoriality (C √ó C) _ C _ m.tensor ‚ü®U, X‚ü© ‚ü®V, Y‚ü© ‚ü®W, Z‚ü© ‚ü®f, h‚ü© ‚ü®g, k‚ü©

@[simp,ematch] lemma MonoidalStructure.interchange_left_identity
  [ m : MonoidalStructure C ]
  { W X Y Z : C }
  ( f : W ‚ü∂ X ) ( g : X ‚ü∂ Y ) :
  (@Functor.onMorphisms _ _ _ _ m.tensor (W, Z) (X, Z) (f, ùüô Z)) ‚â´ (@Functor.onMorphisms _ _ _ _ m.tensor (X, Z) (Y, Z) (g, ùüô Z))
    = @Functor.onMorphisms _ _ _ _ m.tensor ‚ü®W, Z‚ü© ‚ü®Y, Z‚ü© ‚ü®f ‚â´ g, ùüô Z‚ü©
    := by obviously

@[simp,ematch] lemma MonoidalStructure.interchange_right_identity
  [ m : MonoidalStructure C ]
  { W X Y Z : C }
  ( f : W ‚ü∂ X ) ( g : X ‚ü∂ Y ) :
  (@Functor.onMorphisms _ _ _ _ m.tensor (Z, W) (Z, X) (ùüô Z, f)) ‚â´ (@Functor.onMorphisms _ _ _ _  m.tensor (Z, X) (Z, Y) (ùüô Z, g)) 
    = @Functor.onMorphisms _ _ _ _ m.tensor ‚ü®Z, W‚ü© ‚ü®Z, Y‚ü© ‚ü®ùüô Z, f ‚â´ g‚ü©
    := by obviously

@[ematch] lemma MonoidalStructure.interchange_identities
  { C : Category }
  ( m : MonoidalStructure C )
  { W X Y Z : C.Obj }
  ( f : C.Hom W X ) ( g : C.Hom Y Z ) :
  C.compose (m.tensorMorphisms (C.identity Y) f) (m.tensorMorphisms g (C.identity X))
    = C.compose (m.tensorMorphisms g (C.identity W)) (m.tensorMorphisms (C.identity Z) f) :=
    begin
    tidy,
     rewrite ‚Üê MonoidalStructure.interchange,
     simp,
     rewrite ‚Üê MonoidalStructure.interchange,
     simp
    end

@[simp,ematch] lemma MonoidalStructure.tensor_identities
  { C : Category }
  ( m : MonoidalStructure C )
  ( X Y : C.Obj ) :
   @Functor.onMorphisms _ _ (m.tensor) (X, Y) (X, Y) (C.identity X, C.identity Y) = C.identity (m.tensor.onObjects (X, Y)) := 
   begin
     rewrite ‚Üê m.tensor.identities,
     tidy
   end

lemma MonoidalStructure.inverse_associator_naturality_0
  { C : Category }
  ( m : MonoidalStructure C )
  { U V W X Y Z : C.Obj }
  (f : C.Hom U V ) ( g : C.Hom W X ) ( h : C.Hom Y Z ) :
    C.compose
      (@Functor.onMorphisms _ _ m.tensor (U, _) (V, _) (f, (@Functor.onMorphisms _ _ m.tensor (W, _) (X, _) (g, h))))
      (((m.associator_transformation).inverse).components ((V, X), Z))
    = C.compose
      (((m.associator_transformation).inverse).components ((U, W), Y))
      (@Functor.onMorphisms _ _ m.tensor (_, Y) (_, Z) ((@Functor.onMorphisms _ _ m.tensor (U, _) (V, _) (f, g)), h)) :=
  begin
    dsimp,
    apply @NaturalTransformation.naturality _ _ _ _ ((m.associator_transformation).inverse) ((U, W), Y) ((V, X), Z) ((f, g), h)
  end

structure {u v} MonoidalCategory extends C : Category.{u v} :=
  ( m : MonoidalStructure C )

definition {u v} MonoidalCategory_coercion_to_Category : has_coe MonoidalCategory.{u v} Category.{u v} :=
  { coe := MonoidalCategory.C }

attribute [instance] MonoidalCategory_coercion_to_Category

end categories.monoidal_category
